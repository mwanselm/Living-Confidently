<?php
/**
 * Lead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Financial representative API
 *
 * API for pulling information on FRs
 *
 * OpenAPI spec version: 13a2629d2e525f48315447733f74e466e785cee9
 * Contact: kyle_mcmullen@glic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Lead Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Lead implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Lead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'status' => 'string',
        'high_priority' => 'bool',
        'contact_preference' => 'string',
        'best_time_to_call' => 'string',
        'current_client' => 'string',
        'receive_email_updates' => 'bool',
        'auto_assign' => 'bool',
        'customer_note' => 'string',
        'updated_at' => '\DateTime',
        'addresses' => '\Swagger\Client\Model\Address[]',
        'phone_numbers' => '\Swagger\Client\Model\PhoneNumber[]',
        'emails' => '\Swagger\Client\Model\Email[]',
        'services' => '\Swagger\Client\Model\Service[]',
        'service_ids' => 'int[]',
        'campaign_ids' => 'int[]',
        'comments_count' => 'int',
        'recent_comments' => '\Swagger\Client\Model\Comment[]',
        'agency' => '\Swagger\Client\Model\Agency',
        'di_quote' => '\Swagger\Client\Model\DiQuote'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'status' => 'status',
        'high_priority' => 'high_priority',
        'contact_preference' => 'contact_preference',
        'best_time_to_call' => 'best_time_to_call',
        'current_client' => 'current_client',
        'receive_email_updates' => 'receive_email_updates',
        'auto_assign' => 'auto_assign',
        'customer_note' => 'customer_note',
        'updated_at' => 'updated_at',
        'addresses' => 'addresses',
        'phone_numbers' => 'phone_numbers',
        'emails' => 'emails',
        'services' => 'services',
        'service_ids' => 'service_ids',
        'campaign_ids' => 'campaign_ids',
        'comments_count' => 'comments_count',
        'recent_comments' => 'recent_comments',
        'agency' => 'agency',
        'di_quote' => 'di_quote'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'status' => 'setStatus',
        'high_priority' => 'setHighPriority',
        'contact_preference' => 'setContactPreference',
        'best_time_to_call' => 'setBestTimeToCall',
        'current_client' => 'setCurrentClient',
        'receive_email_updates' => 'setReceiveEmailUpdates',
        'auto_assign' => 'setAutoAssign',
        'customer_note' => 'setCustomerNote',
        'updated_at' => 'setUpdatedAt',
        'addresses' => 'setAddresses',
        'phone_numbers' => 'setPhoneNumbers',
        'emails' => 'setEmails',
        'services' => 'setServices',
        'service_ids' => 'setServiceIds',
        'campaign_ids' => 'setCampaignIds',
        'comments_count' => 'setCommentsCount',
        'recent_comments' => 'setRecentComments',
        'agency' => 'setAgency',
        'di_quote' => 'setDiQuote'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'status' => 'getStatus',
        'high_priority' => 'getHighPriority',
        'contact_preference' => 'getContactPreference',
        'best_time_to_call' => 'getBestTimeToCall',
        'current_client' => 'getCurrentClient',
        'receive_email_updates' => 'getReceiveEmailUpdates',
        'auto_assign' => 'getAutoAssign',
        'customer_note' => 'getCustomerNote',
        'updated_at' => 'getUpdatedAt',
        'addresses' => 'getAddresses',
        'phone_numbers' => 'getPhoneNumbers',
        'emails' => 'getEmails',
        'services' => 'getServices',
        'service_ids' => 'getServiceIds',
        'campaign_ids' => 'getCampaignIds',
        'comments_count' => 'getCommentsCount',
        'recent_comments' => 'getRecentComments',
        'agency' => 'getAgency',
        'di_quote' => 'getDiQuote'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['high_priority'] = isset($data['high_priority']) ? $data['high_priority'] : null;
        $this->container['contact_preference'] = isset($data['contact_preference']) ? $data['contact_preference'] : null;
        $this->container['best_time_to_call'] = isset($data['best_time_to_call']) ? $data['best_time_to_call'] : null;
        $this->container['current_client'] = isset($data['current_client']) ? $data['current_client'] : null;
        $this->container['receive_email_updates'] = isset($data['receive_email_updates']) ? $data['receive_email_updates'] : null;
        $this->container['auto_assign'] = isset($data['auto_assign']) ? $data['auto_assign'] : null;
        $this->container['customer_note'] = isset($data['customer_note']) ? $data['customer_note'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['service_ids'] = isset($data['service_ids']) ? $data['service_ids'] : null;
        $this->container['campaign_ids'] = isset($data['campaign_ids']) ? $data['campaign_ids'] : null;
        $this->container['comments_count'] = isset($data['comments_count']) ? $data['comments_count'] : null;
        $this->container['recent_comments'] = isset($data['recent_comments']) ? $data['recent_comments'] : null;
        $this->container['agency'] = isset($data['agency']) ? $data['agency'] : null;
        $this->container['di_quote'] = isset($data['di_quote']) ? $data['di_quote'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets high_priority
     * @return bool
     */
    public function getHighPriority()
    {
        return $this->container['high_priority'];
    }

    /**
     * Sets high_priority
     * @param bool $high_priority
     * @return $this
     */
    public function setHighPriority($high_priority)
    {
        $this->container['high_priority'] = $high_priority;

        return $this;
    }

    /**
     * Gets contact_preference
     * @return string
     */
    public function getContactPreference()
    {
        return $this->container['contact_preference'];
    }

    /**
     * Sets contact_preference
     * @param string $contact_preference
     * @return $this
     */
    public function setContactPreference($contact_preference)
    {
        $this->container['contact_preference'] = $contact_preference;

        return $this;
    }

    /**
     * Gets best_time_to_call
     * @return string
     */
    public function getBestTimeToCall()
    {
        return $this->container['best_time_to_call'];
    }

    /**
     * Sets best_time_to_call
     * @param string $best_time_to_call
     * @return $this
     */
    public function setBestTimeToCall($best_time_to_call)
    {
        $this->container['best_time_to_call'] = $best_time_to_call;

        return $this;
    }

    /**
     * Gets current_client
     * @return string
     */
    public function getCurrentClient()
    {
        return $this->container['current_client'];
    }

    /**
     * Sets current_client
     * @param string $current_client
     * @return $this
     */
    public function setCurrentClient($current_client)
    {
        $this->container['current_client'] = $current_client;

        return $this;
    }

    /**
     * Gets receive_email_updates
     * @return bool
     */
    public function getReceiveEmailUpdates()
    {
        return $this->container['receive_email_updates'];
    }

    /**
     * Sets receive_email_updates
     * @param bool $receive_email_updates
     * @return $this
     */
    public function setReceiveEmailUpdates($receive_email_updates)
    {
        $this->container['receive_email_updates'] = $receive_email_updates;

        return $this;
    }

    /**
     * Gets auto_assign
     * @return bool
     */
    public function getAutoAssign()
    {
        return $this->container['auto_assign'];
    }

    /**
     * Sets auto_assign
     * @param bool $auto_assign
     * @return $this
     */
    public function setAutoAssign($auto_assign)
    {
        $this->container['auto_assign'] = $auto_assign;

        return $this;
    }

    /**
     * Gets customer_note
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customer_note'];
    }

    /**
     * Sets customer_note
     * @param string $customer_note
     * @return $this
     */
    public function setCustomerNote($customer_note)
    {
        $this->container['customer_note'] = $customer_note;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets addresses
     * @return \Swagger\Client\Model\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     * @param \Swagger\Client\Model\Address[] $addresses
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phone_numbers
     * @return \Swagger\Client\Model\PhoneNumber[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     * @param \Swagger\Client\Model\PhoneNumber[] $phone_numbers
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets emails
     * @return \Swagger\Client\Model\Email[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     * @param \Swagger\Client\Model\Email[] $emails
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets services
     * @return \Swagger\Client\Model\Service[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     * @param \Swagger\Client\Model\Service[] $services
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets service_ids
     * @return int[]
     */
    public function getServiceIds()
    {
        return $this->container['service_ids'];
    }

    /**
     * Sets service_ids
     * @param int[] $service_ids
     * @return $this
     */
    public function setServiceIds($service_ids)
    {
        $this->container['service_ids'] = $service_ids;

        return $this;
    }

    /**
     * Gets campaign_ids
     * @return int[]
     */
    public function getCampaignIds()
    {
        return $this->container['campaign_ids'];
    }

    /**
     * Sets campaign_ids
     * @param int[] $campaign_ids
     * @return $this
     */
    public function setCampaignIds($campaign_ids)
    {
        $this->container['campaign_ids'] = $campaign_ids;

        return $this;
    }

    /**
     * Gets comments_count
     * @return int
     */
    public function getCommentsCount()
    {
        return $this->container['comments_count'];
    }

    /**
     * Sets comments_count
     * @param int $comments_count
     * @return $this
     */
    public function setCommentsCount($comments_count)
    {
        $this->container['comments_count'] = $comments_count;

        return $this;
    }

    /**
     * Gets recent_comments
     * @return \Swagger\Client\Model\Comment[]
     */
    public function getRecentComments()
    {
        return $this->container['recent_comments'];
    }

    /**
     * Sets recent_comments
     * @param \Swagger\Client\Model\Comment[] $recent_comments
     * @return $this
     */
    public function setRecentComments($recent_comments)
    {
        $this->container['recent_comments'] = $recent_comments;

        return $this;
    }

    /**
     * Gets agency
     * @return \Swagger\Client\Model\Agency
     */
    public function getAgency()
    {
        return $this->container['agency'];
    }

    /**
     * Sets agency
     * @param \Swagger\Client\Model\Agency $agency
     * @return $this
     */
    public function setAgency($agency)
    {
        $this->container['agency'] = $agency;

        return $this;
    }

    /**
     * Gets di_quote
     * @return \Swagger\Client\Model\DiQuote
     */
    public function getDiQuote()
    {
        return $this->container['di_quote'];
    }

    /**
     * Sets di_quote
     * @param \Swagger\Client\Model\DiQuote $di_quote
     * @return $this
     */
    public function setDiQuote($di_quote)
    {
        $this->container['di_quote'] = $di_quote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


