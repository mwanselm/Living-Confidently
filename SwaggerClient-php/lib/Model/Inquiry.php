<?php
/**
 * Inquiry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Financial representative API
 *
 * API for pulling information on FRs
 *
 * OpenAPI spec version: 13a2629d2e525f48315447733f74e466e785cee9
 * Contact: kyle_mcmullen@glic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Inquiry Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Inquiry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Inquiry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'account_number' => 'string',
        'best_time_to_call' => 'string',
        'customer_note' => 'string',
        'inquiry_topic_id' => 'int',
        'inquiry_topic' => '\Swagger\Client\Model\InquiryTopic',
        'updated_at' => '\DateTime',
        'addresses' => '\Swagger\Client\Model\Address[]',
        'phone_numbers' => '\Swagger\Client\Model\PhoneNumber[]',
        'emails' => '\Swagger\Client\Model\Email[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'account_number' => 'account_number',
        'best_time_to_call' => 'best_time_to_call',
        'customer_note' => 'customer_note',
        'inquiry_topic_id' => 'inquiry_topic_id',
        'inquiry_topic' => 'inquiry_topic',
        'updated_at' => 'updated_at',
        'addresses' => 'addresses',
        'phone_numbers' => 'phone_numbers',
        'emails' => 'emails'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'account_number' => 'setAccountNumber',
        'best_time_to_call' => 'setBestTimeToCall',
        'customer_note' => 'setCustomerNote',
        'inquiry_topic_id' => 'setInquiryTopicId',
        'inquiry_topic' => 'setInquiryTopic',
        'updated_at' => 'setUpdatedAt',
        'addresses' => 'setAddresses',
        'phone_numbers' => 'setPhoneNumbers',
        'emails' => 'setEmails'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'account_number' => 'getAccountNumber',
        'best_time_to_call' => 'getBestTimeToCall',
        'customer_note' => 'getCustomerNote',
        'inquiry_topic_id' => 'getInquiryTopicId',
        'inquiry_topic' => 'getInquiryTopic',
        'updated_at' => 'getUpdatedAt',
        'addresses' => 'getAddresses',
        'phone_numbers' => 'getPhoneNumbers',
        'emails' => 'getEmails'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['best_time_to_call'] = isset($data['best_time_to_call']) ? $data['best_time_to_call'] : null;
        $this->container['customer_note'] = isset($data['customer_note']) ? $data['customer_note'] : null;
        $this->container['inquiry_topic_id'] = isset($data['inquiry_topic_id']) ? $data['inquiry_topic_id'] : null;
        $this->container['inquiry_topic'] = isset($data['inquiry_topic']) ? $data['inquiry_topic'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets best_time_to_call
     * @return string
     */
    public function getBestTimeToCall()
    {
        return $this->container['best_time_to_call'];
    }

    /**
     * Sets best_time_to_call
     * @param string $best_time_to_call
     * @return $this
     */
    public function setBestTimeToCall($best_time_to_call)
    {
        $this->container['best_time_to_call'] = $best_time_to_call;

        return $this;
    }

    /**
     * Gets customer_note
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customer_note'];
    }

    /**
     * Sets customer_note
     * @param string $customer_note
     * @return $this
     */
    public function setCustomerNote($customer_note)
    {
        $this->container['customer_note'] = $customer_note;

        return $this;
    }

    /**
     * Gets inquiry_topic_id
     * @return int
     */
    public function getInquiryTopicId()
    {
        return $this->container['inquiry_topic_id'];
    }

    /**
     * Sets inquiry_topic_id
     * @param int $inquiry_topic_id
     * @return $this
     */
    public function setInquiryTopicId($inquiry_topic_id)
    {
        $this->container['inquiry_topic_id'] = $inquiry_topic_id;

        return $this;
    }

    /**
     * Gets inquiry_topic
     * @return \Swagger\Client\Model\InquiryTopic
     */
    public function getInquiryTopic()
    {
        return $this->container['inquiry_topic'];
    }

    /**
     * Sets inquiry_topic
     * @param \Swagger\Client\Model\InquiryTopic $inquiry_topic
     * @return $this
     */
    public function setInquiryTopic($inquiry_topic)
    {
        $this->container['inquiry_topic'] = $inquiry_topic;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets addresses
     * @return \Swagger\Client\Model\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     * @param \Swagger\Client\Model\Address[] $addresses
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phone_numbers
     * @return \Swagger\Client\Model\PhoneNumber[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     * @param \Swagger\Client\Model\PhoneNumber[] $phone_numbers
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets emails
     * @return \Swagger\Client\Model\Email[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     * @param \Swagger\Client\Model\Email[] $emails
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


