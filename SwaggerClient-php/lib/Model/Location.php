<?php
/**
 * Location
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Financial representative API
 *
 * API for pulling information on FRs
 *
 * OpenAPI spec version: 13a2629d2e525f48315447733f74e466e785cee9
 * Contact: kyle_mcmullen@glic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Location Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Location implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'address' => '\Swagger\Client\Model\Address',
        'phone_number' => '\Swagger\Client\Model\PhoneNumber',
        'phone_number_attributes' => '\Swagger\Client\Model\PhoneNumber',
        'address_attributes' => '\Swagger\Client\Model\Address',
        'state' => 'string',
        'dba_name' => 'string',
        'permalink' => 'string',
        'primary_location' => 'bool',
        'profile' => 'string',
        'disclaimer' => 'string',
        'recruiting' => 'bool',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'address' => 'address',
        'phone_number' => 'phone_number',
        'phone_number_attributes' => 'phone_number_attributes',
        'address_attributes' => 'address_attributes',
        'state' => 'state',
        'dba_name' => 'dba_name',
        'permalink' => 'permalink',
        'primary_location' => 'primary_location',
        'profile' => 'profile',
        'disclaimer' => 'disclaimer',
        'recruiting' => 'recruiting',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'address' => 'setAddress',
        'phone_number' => 'setPhoneNumber',
        'phone_number_attributes' => 'setPhoneNumberAttributes',
        'address_attributes' => 'setAddressAttributes',
        'state' => 'setState',
        'dba_name' => 'setDbaName',
        'permalink' => 'setPermalink',
        'primary_location' => 'setPrimaryLocation',
        'profile' => 'setProfile',
        'disclaimer' => 'setDisclaimer',
        'recruiting' => 'setRecruiting',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'address' => 'getAddress',
        'phone_number' => 'getPhoneNumber',
        'phone_number_attributes' => 'getPhoneNumberAttributes',
        'address_attributes' => 'getAddressAttributes',
        'state' => 'getState',
        'dba_name' => 'getDbaName',
        'permalink' => 'getPermalink',
        'primary_location' => 'getPrimaryLocation',
        'profile' => 'getProfile',
        'disclaimer' => 'getDisclaimer',
        'recruiting' => 'getRecruiting',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['phone_number_attributes'] = isset($data['phone_number_attributes']) ? $data['phone_number_attributes'] : null;
        $this->container['address_attributes'] = isset($data['address_attributes']) ? $data['address_attributes'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['permalink'] = isset($data['permalink']) ? $data['permalink'] : null;
        $this->container['primary_location'] = isset($data['primary_location']) ? $data['primary_location'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['disclaimer'] = isset($data['disclaimer']) ? $data['disclaimer'] : null;
        $this->container['recruiting'] = isset($data['recruiting']) ? $data['recruiting'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param \Swagger\Client\Model\Address $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone_number
     * @return \Swagger\Client\Model\PhoneNumber
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param \Swagger\Client\Model\PhoneNumber $phone_number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_number_attributes
     * @return \Swagger\Client\Model\PhoneNumber
     */
    public function getPhoneNumberAttributes()
    {
        return $this->container['phone_number_attributes'];
    }

    /**
     * Sets phone_number_attributes
     * @param \Swagger\Client\Model\PhoneNumber $phone_number_attributes
     * @return $this
     */
    public function setPhoneNumberAttributes($phone_number_attributes)
    {
        $this->container['phone_number_attributes'] = $phone_number_attributes;

        return $this;
    }

    /**
     * Gets address_attributes
     * @return \Swagger\Client\Model\Address
     */
    public function getAddressAttributes()
    {
        return $this->container['address_attributes'];
    }

    /**
     * Sets address_attributes
     * @param \Swagger\Client\Model\Address $address_attributes
     * @return $this
     */
    public function setAddressAttributes($address_attributes)
    {
        $this->container['address_attributes'] = $address_attributes;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets dba_name
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     * @param string $dba_name
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets permalink
     * @return string
     */
    public function getPermalink()
    {
        return $this->container['permalink'];
    }

    /**
     * Sets permalink
     * @param string $permalink
     * @return $this
     */
    public function setPermalink($permalink)
    {
        $this->container['permalink'] = $permalink;

        return $this;
    }

    /**
     * Gets primary_location
     * @return bool
     */
    public function getPrimaryLocation()
    {
        return $this->container['primary_location'];
    }

    /**
     * Sets primary_location
     * @param bool $primary_location
     * @return $this
     */
    public function setPrimaryLocation($primary_location)
    {
        $this->container['primary_location'] = $primary_location;

        return $this;
    }

    /**
     * Gets profile
     * @return string
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     * @param string $profile
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets disclaimer
     * @return string
     */
    public function getDisclaimer()
    {
        return $this->container['disclaimer'];
    }

    /**
     * Sets disclaimer
     * @param string $disclaimer
     * @return $this
     */
    public function setDisclaimer($disclaimer)
    {
        $this->container['disclaimer'] = $disclaimer;

        return $this;
    }

    /**
     * Gets recruiting
     * @return bool
     */
    public function getRecruiting()
    {
        return $this->container['recruiting'];
    }

    /**
     * Sets recruiting
     * @param bool $recruiting
     * @return $this
     */
    public function setRecruiting($recruiting)
    {
        $this->container['recruiting'] = $recruiting;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


