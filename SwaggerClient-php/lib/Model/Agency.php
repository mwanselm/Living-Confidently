<?php
/**
 * Agency
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Financial representative API
 *
 * API for pulling information on FRs
 *
 * OpenAPI spec version: 13a2629d2e525f48315447733f74e466e785cee9
 * Contact: kyle_mcmullen@glic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Agency Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Agency implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Agency';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'permalink' => 'string',
        'phone_numbers' => '\Swagger\Client\Model\PhoneNumber[]',
        'web_sites' => '\Swagger\Client\Model\WebSite[]',
        'primary_name' => 'string',
        'region' => 'string',
        'logo_url' => 'string',
        'default_profile' => 'string',
        'default_disclaimer' => 'string',
        'logo' => '\Swagger\Client\Model\Logo',
        'lead_coordinator' => '\Swagger\Client\Model\User',
        'lead_coordinator_username' => 'string',
        'recruiting_contact_username' => 'string',
        'recruiting_contact' => '\Swagger\Client\Model\User',
        'locations' => '\Swagger\Client\Model\Location[]',
        'phone_numbers_attributes' => '\Swagger\Client\Model\PhoneNumber[]',
        'web_sites_attributes' => '\Swagger\Client\Model\WebSite[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'permalink' => 'permalink',
        'phone_numbers' => 'phone_numbers',
        'web_sites' => 'web_sites',
        'primary_name' => 'primary_name',
        'region' => 'region',
        'logo_url' => 'logo_url',
        'default_profile' => 'default_profile',
        'default_disclaimer' => 'default_disclaimer',
        'logo' => 'logo',
        'lead_coordinator' => 'lead_coordinator',
        'lead_coordinator_username' => 'lead_coordinator_username',
        'recruiting_contact_username' => 'recruiting_contact_username',
        'recruiting_contact' => 'recruiting_contact',
        'locations' => 'locations',
        'phone_numbers_attributes' => 'phone_numbers_attributes',
        'web_sites_attributes' => 'web_sites_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'permalink' => 'setPermalink',
        'phone_numbers' => 'setPhoneNumbers',
        'web_sites' => 'setWebSites',
        'primary_name' => 'setPrimaryName',
        'region' => 'setRegion',
        'logo_url' => 'setLogoUrl',
        'default_profile' => 'setDefaultProfile',
        'default_disclaimer' => 'setDefaultDisclaimer',
        'logo' => 'setLogo',
        'lead_coordinator' => 'setLeadCoordinator',
        'lead_coordinator_username' => 'setLeadCoordinatorUsername',
        'recruiting_contact_username' => 'setRecruitingContactUsername',
        'recruiting_contact' => 'setRecruitingContact',
        'locations' => 'setLocations',
        'phone_numbers_attributes' => 'setPhoneNumbersAttributes',
        'web_sites_attributes' => 'setWebSitesAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'permalink' => 'getPermalink',
        'phone_numbers' => 'getPhoneNumbers',
        'web_sites' => 'getWebSites',
        'primary_name' => 'getPrimaryName',
        'region' => 'getRegion',
        'logo_url' => 'getLogoUrl',
        'default_profile' => 'getDefaultProfile',
        'default_disclaimer' => 'getDefaultDisclaimer',
        'logo' => 'getLogo',
        'lead_coordinator' => 'getLeadCoordinator',
        'lead_coordinator_username' => 'getLeadCoordinatorUsername',
        'recruiting_contact_username' => 'getRecruitingContactUsername',
        'recruiting_contact' => 'getRecruitingContact',
        'locations' => 'getLocations',
        'phone_numbers_attributes' => 'getPhoneNumbersAttributes',
        'web_sites_attributes' => 'getWebSitesAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['permalink'] = isset($data['permalink']) ? $data['permalink'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['web_sites'] = isset($data['web_sites']) ? $data['web_sites'] : null;
        $this->container['primary_name'] = isset($data['primary_name']) ? $data['primary_name'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['default_profile'] = isset($data['default_profile']) ? $data['default_profile'] : null;
        $this->container['default_disclaimer'] = isset($data['default_disclaimer']) ? $data['default_disclaimer'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['lead_coordinator'] = isset($data['lead_coordinator']) ? $data['lead_coordinator'] : null;
        $this->container['lead_coordinator_username'] = isset($data['lead_coordinator_username']) ? $data['lead_coordinator_username'] : null;
        $this->container['recruiting_contact_username'] = isset($data['recruiting_contact_username']) ? $data['recruiting_contact_username'] : null;
        $this->container['recruiting_contact'] = isset($data['recruiting_contact']) ? $data['recruiting_contact'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['phone_numbers_attributes'] = isset($data['phone_numbers_attributes']) ? $data['phone_numbers_attributes'] : null;
        $this->container['web_sites_attributes'] = isset($data['web_sites_attributes']) ? $data['web_sites_attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets permalink
     * @return string
     */
    public function getPermalink()
    {
        return $this->container['permalink'];
    }

    /**
     * Sets permalink
     * @param string $permalink
     * @return $this
     */
    public function setPermalink($permalink)
    {
        $this->container['permalink'] = $permalink;

        return $this;
    }

    /**
     * Gets phone_numbers
     * @return \Swagger\Client\Model\PhoneNumber[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     * @param \Swagger\Client\Model\PhoneNumber[] $phone_numbers
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets web_sites
     * @return \Swagger\Client\Model\WebSite[]
     */
    public function getWebSites()
    {
        return $this->container['web_sites'];
    }

    /**
     * Sets web_sites
     * @param \Swagger\Client\Model\WebSite[] $web_sites
     * @return $this
     */
    public function setWebSites($web_sites)
    {
        $this->container['web_sites'] = $web_sites;

        return $this;
    }

    /**
     * Gets primary_name
     * @return string
     */
    public function getPrimaryName()
    {
        return $this->container['primary_name'];
    }

    /**
     * Sets primary_name
     * @param string $primary_name
     * @return $this
     */
    public function setPrimaryName($primary_name)
    {
        $this->container['primary_name'] = $primary_name;

        return $this;
    }

    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     * @param string $region
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets logo_url
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     * @param string $logo_url
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets default_profile
     * @return string
     */
    public function getDefaultProfile()
    {
        return $this->container['default_profile'];
    }

    /**
     * Sets default_profile
     * @param string $default_profile
     * @return $this
     */
    public function setDefaultProfile($default_profile)
    {
        $this->container['default_profile'] = $default_profile;

        return $this;
    }

    /**
     * Gets default_disclaimer
     * @return string
     */
    public function getDefaultDisclaimer()
    {
        return $this->container['default_disclaimer'];
    }

    /**
     * Sets default_disclaimer
     * @param string $default_disclaimer
     * @return $this
     */
    public function setDefaultDisclaimer($default_disclaimer)
    {
        $this->container['default_disclaimer'] = $default_disclaimer;

        return $this;
    }

    /**
     * Gets logo
     * @return \Swagger\Client\Model\Logo
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     * @param \Swagger\Client\Model\Logo $logo
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets lead_coordinator
     * @return \Swagger\Client\Model\User
     */
    public function getLeadCoordinator()
    {
        return $this->container['lead_coordinator'];
    }

    /**
     * Sets lead_coordinator
     * @param \Swagger\Client\Model\User $lead_coordinator
     * @return $this
     */
    public function setLeadCoordinator($lead_coordinator)
    {
        $this->container['lead_coordinator'] = $lead_coordinator;

        return $this;
    }

    /**
     * Gets lead_coordinator_username
     * @return string
     */
    public function getLeadCoordinatorUsername()
    {
        return $this->container['lead_coordinator_username'];
    }

    /**
     * Sets lead_coordinator_username
     * @param string $lead_coordinator_username
     * @return $this
     */
    public function setLeadCoordinatorUsername($lead_coordinator_username)
    {
        $this->container['lead_coordinator_username'] = $lead_coordinator_username;

        return $this;
    }

    /**
     * Gets recruiting_contact_username
     * @return string
     */
    public function getRecruitingContactUsername()
    {
        return $this->container['recruiting_contact_username'];
    }

    /**
     * Sets recruiting_contact_username
     * @param string $recruiting_contact_username
     * @return $this
     */
    public function setRecruitingContactUsername($recruiting_contact_username)
    {
        $this->container['recruiting_contact_username'] = $recruiting_contact_username;

        return $this;
    }

    /**
     * Gets recruiting_contact
     * @return \Swagger\Client\Model\User
     */
    public function getRecruitingContact()
    {
        return $this->container['recruiting_contact'];
    }

    /**
     * Sets recruiting_contact
     * @param \Swagger\Client\Model\User $recruiting_contact
     * @return $this
     */
    public function setRecruitingContact($recruiting_contact)
    {
        $this->container['recruiting_contact'] = $recruiting_contact;

        return $this;
    }

    /**
     * Gets locations
     * @return \Swagger\Client\Model\Location[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     * @param \Swagger\Client\Model\Location[] $locations
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets phone_numbers_attributes
     * @return \Swagger\Client\Model\PhoneNumber[]
     */
    public function getPhoneNumbersAttributes()
    {
        return $this->container['phone_numbers_attributes'];
    }

    /**
     * Sets phone_numbers_attributes
     * @param \Swagger\Client\Model\PhoneNumber[] $phone_numbers_attributes
     * @return $this
     */
    public function setPhoneNumbersAttributes($phone_numbers_attributes)
    {
        $this->container['phone_numbers_attributes'] = $phone_numbers_attributes;

        return $this;
    }

    /**
     * Gets web_sites_attributes
     * @return \Swagger\Client\Model\WebSite[]
     */
    public function getWebSitesAttributes()
    {
        return $this->container['web_sites_attributes'];
    }

    /**
     * Sets web_sites_attributes
     * @param \Swagger\Client\Model\WebSite[] $web_sites_attributes
     * @return $this
     */
    public function setWebSitesAttributes($web_sites_attributes)
    {
        $this->container['web_sites_attributes'] = $web_sites_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


