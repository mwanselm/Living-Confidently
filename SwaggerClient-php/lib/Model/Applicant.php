<?php
/**
 * Applicant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Financial representative API
 *
 * API for pulling information on FRs
 *
 * OpenAPI spec version: 13a2629d2e525f48315447733f74e466e785cee9
 * Contact: kyle_mcmullen@glic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Applicant Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Applicant implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Applicant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'state' => 'string',
        'high_priority' => 'bool',
        'has_resume' => 'bool',
        'licensed' => 'bool',
        'sponsorship' => 'bool',
        'level_of_experience' => 'string',
        'comments' => 'string',
        'resume' => 'string',
        'current_occupation' => 'string',
        'financial_service_experience' => 'string',
        'licenses' => 'string',
        'location_ids' => 'int[]',
        'campaign_ids' => 'int[]',
        'updated_at' => '\DateTime',
        'addresses' => '\Swagger\Client\Model\Address[]',
        'phone_numbers' => '\Swagger\Client\Model\PhoneNumber[]',
        'emails' => '\Swagger\Client\Model\Email[]',
        'web_sites' => '\Swagger\Client\Model\WebSite[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'state' => 'state',
        'high_priority' => 'high_priority',
        'has_resume' => 'has_resume',
        'licensed' => 'licensed',
        'sponsorship' => 'sponsorship',
        'level_of_experience' => 'level_of_experience',
        'comments' => 'comments',
        'resume' => 'resume',
        'current_occupation' => 'current_occupation',
        'financial_service_experience' => 'financial_service_experience',
        'licenses' => 'licenses',
        'location_ids' => 'location_ids',
        'campaign_ids' => 'campaign_ids',
        'updated_at' => 'updated_at',
        'addresses' => 'addresses',
        'phone_numbers' => 'phone_numbers',
        'emails' => 'emails',
        'web_sites' => 'web_sites'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'state' => 'setState',
        'high_priority' => 'setHighPriority',
        'has_resume' => 'setHasResume',
        'licensed' => 'setLicensed',
        'sponsorship' => 'setSponsorship',
        'level_of_experience' => 'setLevelOfExperience',
        'comments' => 'setComments',
        'resume' => 'setResume',
        'current_occupation' => 'setCurrentOccupation',
        'financial_service_experience' => 'setFinancialServiceExperience',
        'licenses' => 'setLicenses',
        'location_ids' => 'setLocationIds',
        'campaign_ids' => 'setCampaignIds',
        'updated_at' => 'setUpdatedAt',
        'addresses' => 'setAddresses',
        'phone_numbers' => 'setPhoneNumbers',
        'emails' => 'setEmails',
        'web_sites' => 'setWebSites'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'state' => 'getState',
        'high_priority' => 'getHighPriority',
        'has_resume' => 'getHasResume',
        'licensed' => 'getLicensed',
        'sponsorship' => 'getSponsorship',
        'level_of_experience' => 'getLevelOfExperience',
        'comments' => 'getComments',
        'resume' => 'getResume',
        'current_occupation' => 'getCurrentOccupation',
        'financial_service_experience' => 'getFinancialServiceExperience',
        'licenses' => 'getLicenses',
        'location_ids' => 'getLocationIds',
        'campaign_ids' => 'getCampaignIds',
        'updated_at' => 'getUpdatedAt',
        'addresses' => 'getAddresses',
        'phone_numbers' => 'getPhoneNumbers',
        'emails' => 'getEmails',
        'web_sites' => 'getWebSites'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['high_priority'] = isset($data['high_priority']) ? $data['high_priority'] : null;
        $this->container['has_resume'] = isset($data['has_resume']) ? $data['has_resume'] : null;
        $this->container['licensed'] = isset($data['licensed']) ? $data['licensed'] : null;
        $this->container['sponsorship'] = isset($data['sponsorship']) ? $data['sponsorship'] : null;
        $this->container['level_of_experience'] = isset($data['level_of_experience']) ? $data['level_of_experience'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['resume'] = isset($data['resume']) ? $data['resume'] : null;
        $this->container['current_occupation'] = isset($data['current_occupation']) ? $data['current_occupation'] : null;
        $this->container['financial_service_experience'] = isset($data['financial_service_experience']) ? $data['financial_service_experience'] : null;
        $this->container['licenses'] = isset($data['licenses']) ? $data['licenses'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['campaign_ids'] = isset($data['campaign_ids']) ? $data['campaign_ids'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['web_sites'] = isset($data['web_sites']) ? $data['web_sites'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets high_priority
     * @return bool
     */
    public function getHighPriority()
    {
        return $this->container['high_priority'];
    }

    /**
     * Sets high_priority
     * @param bool $high_priority
     * @return $this
     */
    public function setHighPriority($high_priority)
    {
        $this->container['high_priority'] = $high_priority;

        return $this;
    }

    /**
     * Gets has_resume
     * @return bool
     */
    public function getHasResume()
    {
        return $this->container['has_resume'];
    }

    /**
     * Sets has_resume
     * @param bool $has_resume
     * @return $this
     */
    public function setHasResume($has_resume)
    {
        $this->container['has_resume'] = $has_resume;

        return $this;
    }

    /**
     * Gets licensed
     * @return bool
     */
    public function getLicensed()
    {
        return $this->container['licensed'];
    }

    /**
     * Sets licensed
     * @param bool $licensed
     * @return $this
     */
    public function setLicensed($licensed)
    {
        $this->container['licensed'] = $licensed;

        return $this;
    }

    /**
     * Gets sponsorship
     * @return bool
     */
    public function getSponsorship()
    {
        return $this->container['sponsorship'];
    }

    /**
     * Sets sponsorship
     * @param bool $sponsorship
     * @return $this
     */
    public function setSponsorship($sponsorship)
    {
        $this->container['sponsorship'] = $sponsorship;

        return $this;
    }

    /**
     * Gets level_of_experience
     * @return string
     */
    public function getLevelOfExperience()
    {
        return $this->container['level_of_experience'];
    }

    /**
     * Sets level_of_experience
     * @param string $level_of_experience
     * @return $this
     */
    public function setLevelOfExperience($level_of_experience)
    {
        $this->container['level_of_experience'] = $level_of_experience;

        return $this;
    }

    /**
     * Gets comments
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     * @param string $comments
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets resume
     * @return string
     */
    public function getResume()
    {
        return $this->container['resume'];
    }

    /**
     * Sets resume
     * @param string $resume
     * @return $this
     */
    public function setResume($resume)
    {
        $this->container['resume'] = $resume;

        return $this;
    }

    /**
     * Gets current_occupation
     * @return string
     */
    public function getCurrentOccupation()
    {
        return $this->container['current_occupation'];
    }

    /**
     * Sets current_occupation
     * @param string $current_occupation
     * @return $this
     */
    public function setCurrentOccupation($current_occupation)
    {
        $this->container['current_occupation'] = $current_occupation;

        return $this;
    }

    /**
     * Gets financial_service_experience
     * @return string
     */
    public function getFinancialServiceExperience()
    {
        return $this->container['financial_service_experience'];
    }

    /**
     * Sets financial_service_experience
     * @param string $financial_service_experience
     * @return $this
     */
    public function setFinancialServiceExperience($financial_service_experience)
    {
        $this->container['financial_service_experience'] = $financial_service_experience;

        return $this;
    }

    /**
     * Gets licenses
     * @return string
     */
    public function getLicenses()
    {
        return $this->container['licenses'];
    }

    /**
     * Sets licenses
     * @param string $licenses
     * @return $this
     */
    public function setLicenses($licenses)
    {
        $this->container['licenses'] = $licenses;

        return $this;
    }

    /**
     * Gets location_ids
     * @return int[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     * @param int[] $location_ids
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets campaign_ids
     * @return int[]
     */
    public function getCampaignIds()
    {
        return $this->container['campaign_ids'];
    }

    /**
     * Sets campaign_ids
     * @param int[] $campaign_ids
     * @return $this
     */
    public function setCampaignIds($campaign_ids)
    {
        $this->container['campaign_ids'] = $campaign_ids;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets addresses
     * @return \Swagger\Client\Model\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     * @param \Swagger\Client\Model\Address[] $addresses
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phone_numbers
     * @return \Swagger\Client\Model\PhoneNumber[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     * @param \Swagger\Client\Model\PhoneNumber[] $phone_numbers
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets emails
     * @return \Swagger\Client\Model\Email[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     * @param \Swagger\Client\Model\Email[] $emails
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets web_sites
     * @return \Swagger\Client\Model\WebSite[]
     */
    public function getWebSites()
    {
        return $this->container['web_sites'];
    }

    /**
     * Sets web_sites
     * @param \Swagger\Client\Model\WebSite[] $web_sites
     * @return $this
     */
    public function setWebSites($web_sites)
    {
        $this->container['web_sites'] = $web_sites;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


